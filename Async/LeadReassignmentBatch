/* Author 	- svasagar
* Date 		- 10/25/2025
* Purpose 	- Whenever a Lead with Days_Since_Last_Activity__c > 5 days,  
*			- Owner Id should be mapped to Manager or Default user	
*			- Task should be created for Lead	
*/

public class LeadReassignmentBatch implements Database.Batchable<sObject>, Database.Stateful {
    // Using StateFull
    public Integer totalProcessed = 0;
    public List<Id> processedLeadIds = new List<Id>();
    
    // Optional constructor for test dependency injection
    private String testDefaultUserId;
    public LeadReassignmentBatch() {} // default constructor
    public LeadReassignmentBatch(String testDefaultUserIdOptional) {
        this.testDefaultUserId = testDefaultUserIdOptional;
    }
    
    public Database.QueryLocator start(Database.BatchableContext ctx) {
        return Database.getQueryLocator('Select Id, OwnerId FROM Lead WHERE Days_Since_Last_Activity__c > 5' +
           								'And Processed_Lead__c = False');
        // Testing Querry
        /* return Database.getQueryLocator('Select Id, OwnerId FROM Lead ' +
                                        'WHERE Processed_Lead__c = False And Name Like \'Batch%\''); */ 
    }
    
    public void execute(Database.BatchableContext ctx, List<Lead> leadList){ 
        // Set to Store userID
        Set<Id> userId = new  Set<Id>();
        
        for(Lead record : leadList){
            userId.add(record.OwnerId);
        }
        
        // Fetch ManagerId by actual lead owner using Set
        List<User> repsManagerList = [Select Id, Name, ManagerId, Manager.Name 
                                      FROM User WHERE Id In : userId and ManagerId != Null]; 
        
        // Map to store actual Lead OwnerId and ManagerId
        Map<Id, Id> userToManagerMap = new Map<Id, Id>();
        
        for(User userRecord : repsManagerList){
            userToManagerMap.put(userRecord.Id, userRecord.ManagerId);
        }
        //system.debug(userToManagerMap);
        
        // List of Task to Insert
        List<Task> taskListToBeInsert = new List<Task> ();
        
        // Default User(System Admin) when ManagerId = Null
        String defaultUserId;
        if (testDefaultUserId != null) {
            defaultUserId = testDefaultUserId;
        } else {
            try {
                defaultUserId = System.Label.DefaultUserID;
            } catch (Exception e) {
                System.debug('Invalid DefaultUserID label: ' + e.getMessage());
                return;
            }
        }
        
        // Update Lead with new ManagerId and reset last date = 0
        for(Lead record : leadList){
            if(userToManagerMap.containsKey(record.OwnerId)){  // If Map contains Manager Id
                record.OwnerId = userToManagerMap.get(record.OwnerId);
            }
            else{
                record.OwnerId = defaultUserId;  // Set System Admin as Owner
            }
            record.Processed_Lead__c = True;	 // Mark Lead record as Processed

            Task obj = new Task (
                Subject = 'Task created for Inactive leads',
                OwnerId = record.OwnerId,
                WhoId = record.Id,
                Description = 'Task created after 5 days of Inactive status of lead' 
                
            );
            
            taskListToBeInsert.add(obj);  
        }
        
        try{
            if(!leadList.isEmpty())  {
                Database.SaveResult[] leadResults = Database.update(leadList, false);
                for (Integer i = 0; i < leadResults.size(); i++) {
                    if (leadResults[i].isSuccess()) {
                        processedLeadIds.add(leadList[i].Id);
                        totalProcessed++;
                    } else {
                        for (Database.Error err : leadResults[i].getErrors()) {
                            System.debug('Lead update failed: ' + leadList[i].Id + ' - ' + err.getMessage());
                        }
                    }
                }
                // System.debug('SOQL used: ' + Limits.getQueries());
                // System.debug('DML used: ' + Limits.getDmlStatements());
                
                if (!taskListToBeInsert.isEmpty()) {
                    Database.SaveResult[] taskResults = Database.insert(taskListToBeInsert, false);
                    for (Integer i = 0; i < taskResults.size(); i++) {
                        if (!taskResults[i].isSuccess()) {
                            for (Database.Error err : taskResults[i].getErrors()) {
                                System.debug('Task insert failed: ' + err.getMessage());
                            }
                        }
                    }
                }  
            }
        }
            catch(Exception e){
                system.debug('Error Updating : ' + e.getMessage());
            } 
        }
        
        public void Finish(Database.BatchableContext ctx){ 
            AsyncApexJob jobList = [Select Id, Status, JobItemsProcessed, TotalJobItems, NumberofErrors
                                    from AsyncApexJob where Id =: ctx.getJobId()];
            
            System.debug('Total processed: ' + totalProcessed);
            System.debug('Processed Lead Ids: ' + processedLeadIds);
            
            System.debug(jobList);
        }
    }
